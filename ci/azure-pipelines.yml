trigger: none
pr:
  branches:
    include:
    - master
    - v*.*.x
  paths:
    exclude:
    - .git*
    - /**/*.md
    - NEWS
    - AUTHORS

resources:
  containers:
    - container: centos7
      image: rdmz-harbor.rdmz.labs.mlnx/xpmem/x86_64/centos7:2
      options: -v /hpc/local:/hpc/local -v /auto/sw_tools:/auto/sw_tools
    - container: centos8
      image: rdmz-harbor.rdmz.labs.mlnx/xpmem/x86_64/centos8:2
    - container: ubuntu18
      image: rdmz-harbor.rdmz.labs.mlnx/xpmem/x86_64/ubuntu18.04:2
    - container: ubuntu20
      image: rdmz-harbor.rdmz.labs.mlnx/xpmem/x86_64/ubuntu20.04:2
    - container: ubuntu22
      image: rdmz-harbor.rdmz.labs.mlnx/xpmem/x86_64/ubuntu22.04:2
    - container: fedora
      image: rdmz-harbor.rdmz.labs.mlnx/ucx/fedora33:1

stages:
  - stage: Codestyle
    jobs:
      - job: format
        displayName: Format code
        pool:
          name: MLNX
          demands:
          - ucx_docker
        container: fedora
        steps:
          - checkout: self
            clean: true
            fetchDepth: 100
          - bash: |
              set -x
              BASE_SOURCEVERSION=$(git rev-parse HEAD^)
              echo "Checking code format on diff ${BASE_SOURCEVERSION}..${BUILD_SOURCEVERSION}"
              PATCH=$(git-clang-format --diff ${BASE_SOURCEVERSION} ${BUILD_SOURCEVERSION} ./)
              if [ "$PATCH" = "no modified files to format" ]; then
                  exit
              fi
              echo "$PATCH" | git apply
              if ! git diff --quiet --exit-code; then
                set +x
                echo "##vso[task.complete result=SucceededWithIssues;]DONE Code is not formatted correctly"
              fi
            condition: eq(variables['Build.Reason'], 'PullRequest')
            displayName: Check gtest code format
            workingDirectory: $(System.DefaultWorkingDirectory)/test/gtest

  - stage: Coverity
    dependsOn: Codestyle
    jobs:
      - template: coverity.yml

  - stage: Docker
    displayName: Build on Docker
    dependsOn: Codestyle
    jobs:
      - job: Build
        pool:
          name: MLNX
          demands:
            - ucx_docker

        strategy:
          matrix:
            centos7:
              build_container: centos7
            centos8:
              build_container: centos8
            ubuntu18:
              build_container: ubuntu18
            ubuntu20:
              build_container: ubuntu20
            ubuntu22:
              build_container: ubuntu22
        container: $[ variables['build_container'] ]

        steps:
          - checkout: self
            clean: true
            fetchDepth: 100
    
          - bash: |
              set -eEx
              ./autogen.sh
              kernel_ver=$(rpm -qa | grep kernel-devel | cut -d'-' -f3-)
              export CFLAGS='-Werror -Wall'
              export KFLAGS='-Werror'
              ./configure --with-kerneldir=/usr/src/kernels/${kernel_ver}
              make
            displayName: Build on CentOS
            condition: contains(variables['build_container'], 'centos')

          - bash: |
              set -eEx
              ./autogen.sh
              kernel_ver=$(dpkg -l | grep 'linux-headers-.*-generic' | awk '{print $2}')
              export CFLAGS='-Werror -Wall'
              export KFLAGS='-Werror'
              ./configure --enable-gtest --with-kerneldir=/usr/src/${kernel_ver}
              make
            displayName: Build on Ubuntu
            condition: contains(variables['build_container'], 'ubuntu')

          - bash: |
              set -eEx
              test -f Makefile && make -i distclean || true
              ./autogen.sh
              export CFLAGS='-Werror -Wall'
              ./configure --disable-kernel-module
              make
            displayName: Build on CentOS without kernel module
            condition: contains(variables['build_container'], 'centos')

          - bash: |
              set -eEx
              test -f Makefile && make -i distclean || true
              ./autogen.sh
              export CFLAGS='-Werror -Wall'
              ./configure --enable-gtest --disable-kernel-module
              make
            displayName: Build on Ubuntu without kernel module
            condition: contains(variables['build_container'], 'ubuntu')

          - bash: |
              set -eEx
              # Workaround DKMS issue:
              # - https://github.com/dell/dkms/commit/468025752343dbc8609704bf0915f52b9c5c50f2
              sudo sed -i  -e 's@if \[\[ ! $temp_dir_name/dkms_main_tree \]\]@if \[\[ ! -d $temp_dir_name/dkms_main_tree \]\]@g' /usr/sbin/dkms || true

              # dkms needs 'make mrproper' to work properly
              sudo apt-get update
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y bison flex git debhelper

              git clean -xdf
              ./autogen.sh
              ./configure --disable-kernel-module
              make dist

              sudo dkms ldtarball ./xpmem-*.tar.gz
              dkms status -m xpmem
              version=$(dkms status -m xpmem | sed -n -e 's@xpmem[,/ ]\+\([^:,]\+\).*@\1@p')
              kernel_ver=$(dpkg -l | grep 'linux-headers-.*-generic' | awk '{print $2; exit; }')
              kernel_rel=$(echo "$kernel_ver" | sed -e 's@linux-headers-@@')
              sudo dkms build "xpmem/$version" --kernelsourcedir=/usr/src/${kernel_ver} -k ${kernel_rel}
              dkms status -m xpmem
              sudo dkms mkdeb "xpmem/$version" --source-only
              sudo dkms mkbmdeb "xpmem/$version" --all
              cp /var/lib/dkms/xpmem/$version/deb/xpmem-dkms_${version}_*.deb ./
              cp /var/lib/dkms/xpmem/$version/bmdeb/xpmem-modules-*.deb ./
              sudo dkms remove "xpmem/$version" --all || true
              sudo rm -rf /var/lib/dkms/xpmem/$version/deb/*
              sudo rm -rf /usr/src/xpmem-*

              sudo dpkg -i xpmem-dkms_${version}_*.deb
              sudo dpkg --contents xpmem-modules-*.deb

            displayName: DKMS module build on Ubuntu
            condition: contains(variables['build_container'], 'ubuntu')

          - bash: |
              set -eEx
              test -f Makefile && make -i distclean || true
              sudo apt-get update
              sudo apt-get install -y debhelper

              ./autogen.sh
              ./configure --disable-kernel-module
              make dist-gzip
              tarball="$(ls xpmem-*.tar.gz)"
              tar zxf "$tarball"
              cd "${tarball%.tar.gz}"
              dpkg-buildpackage --build=binary -uc
              cd -
              dpkg --contents libxpmem_*.deb
              dpkg --contents libxpmem-dev_*.deb
              dpkg --contents libxpmem-dbgsym_*.ddeb

              sudo dpkg -i libxpmem_*.deb
              sudo dpkg -i libxpmem-dev_*.deb
              echo -e '#include <xpmem.h>\n int main() { (void)xpmem_version(); return 0; }' | gcc -xc - -lxpmem -o dump
              ldd dump
              ./dump

            displayName: Debian userspace packaging
            condition: contains(variables['build_container'], 'ubuntu')

          - bash: |
              set -eEx
              test -f Makefile && make -i distclean || true
              sudo apt-get update
              sudo apt-get install -y rpm
              mkdir {BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
              sed -i '/BuildRequires/d' xpmem.spec
              ./autogen.sh
              ./configure --disable-kernel-module
              make dist-gzip
              mv xpmem-*.tar.* ./SOURCES/
              rpmbuild --define "_topdir $PWD" -ba xpmem.spec
              find RPMS SRPMS
            displayName: Build userspace RPMs on CentOS
            condition: contains(variables['build_container'], 'ubuntu18')

  - stage: VMs
    displayName: Build & Test on VMs
    dependsOn: Codestyle
    jobs:
      - job: Test
        timeoutInMinutes: 240
        workspace:
          clean: all
        pool:
          name: MLNX
          demands:
            - ucx_vagrant

        strategy:
          matrix:
            ubuntu2310:
              BOX_NAME: ubuntu2310
            ubuntu2204:
              BOX_NAME: ubuntu2204
            ubuntu1804:
              BOX_NAME: ubuntu1804
            ubuntu20:
              BOX_NAME: ubuntu2004
            centos7:
              BOX_NAME: centos7

        steps:
          - checkout: self
            clean: true
            fetchDepth: 100
    
          - bash: |
              set -x
              export VAGRANT_HOME=/opt/vagrant_home
              vagrant up
            displayName: Bring up VM
            workingDirectory: $(System.DefaultWorkingDirectory)/ci/vm/

          - bash: |
              vagrant ssh -- -t '
                cd xpmem/test/share
                sudo ./run.sh
              '
            displayName: Old tests
            workingDirectory: $(System.DefaultWorkingDirectory)/ci/vm/

          - bash: |
              vagrant ssh -- -t '
                sudo ./xpmem/test/gtest/gtest
              '
            displayName: Gtest
            workingDirectory: $(System.DefaultWorkingDirectory)/ci/vm/

          - bash: |
              set -x
              hostname
              export VAGRANT_HOME=/opt/vagrant_home
              vagrant destroy -f
              vagrant global-status --prune
              set +e
              virsh destroy vm_${BOX_NAME}
              virsh undefine vm_${BOX_NAME}
              sudo rm -rf /var/lib/libvirt/images/*
              virsh pool-destroy  default
              virsh pool-delete   default
              virsh pool-undefine default
            condition: always()
            displayName: Bring down VM
            workingDirectory: $(System.DefaultWorkingDirectory)/ci/vm/
